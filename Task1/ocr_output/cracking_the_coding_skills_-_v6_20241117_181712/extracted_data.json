{
  "title": "Listen - - - -",
  "table": [
    "Listen - - - -",
    "Example",
    "CRACKING THE",
    "Pay very close attention to any info in the",
    " Most examples are too small or are special",
    "CODING",
    "problem description. You probably need it",
    "cases. Debug your example. Is there any way",
    "all for an optimal algorithm.",
    "it's a special case? Is it big enough?",
    "SKILLS",
    "BUD Optimization",
    "Brute Force",
    "Bottleneds",
    "Created By Gayle",
    "Get a brute-force solution as soon as possible. Don't",
    "UnnecessaryWork",
    "Laakmann McDowell",
    "worry about developing an efficient algorithm",
    "DuplicatedWork",
    "yet. State a naive algorithm and its runtime, then",
    "optimize from there. Don't code yet though!",
    "Best Conceivable",
    "Runtime (BCR)",
    "Test",
    "ptimize",
    "BCR is the runtime you know you",
    "Test in this order:",
    "can't beat. For example, if asked",
    "Walk through your brute force with BUD",
    "to compute the intersection of",
    "1. Conceptual test. Walk through your code",
    "optimization or try some of these idleas:",
    "two sets, you know you can't beat",
    "like you would for a detailed code review.",
    "O(|A|+|B|).",
    ". Look for any unused info. You usually need all",
    "2. Unusual or non-standard code.",
    "the information in a problem.",
    "3. Hot spots, like arithmetic and null nodes.",
    "5 Approaches",
    " Solve it manually on an example, then reverse I",
    "4. Small test cases. It's much faster than a big",
    ". BuD: Look for bottlenecks,",
    "engineer your thought process. How did you",
    "test case and just as effective.",
    "solve it?",
    "unnecessary work,",
    "5. Special cases and edge cases.",
    "duplicated work.",
    ", Solve it\"incorrectly\"and then think about why",
    "And when you find bugs, fix them carefully!",
    "the algorithm fails. Can you fix those issues?",
    "DIY: Do It Yourself",
    " Simplify & Generalize:",
    "Make a time vs. space tradeoff. Hash tables are I",
    "Implement <",
    "especially useful!",
    "Solve a simpler version.",
    "6",
    "Base Case & Build: Solve for",
    "Your goal is to write beautiful code.",
    "the base cases then build",
    "Walk Through  - -",
    "Modularize your code from the beginning",
    "from there.",
    "and refactor to clean up anything that isn't",
    "Data Structure Brainstorm:",
    " Now that you have an optimal solution, walk",
    "beautiful.",
    "Try various data structures..",
    "through your approach in detail. Make sure you",
    "understand each detail before you start coding.",
    "What You Need To Know",
    "Data Structures: Hash Tables, Linked Lists, Stacks, Queues,",
    "Exercises:",
    "Trees, Tries, Graphs, Vectors, Heaps.",
    "Implement data structures & algorithms from scratch.",
    "Prove to yourself the runtime of the major algorithms.",
    "Algorithms: Quick Sort, Merge Sort, Binary Search, Breadth-",
    "First Search, Depth-First Search.",
    "Concepts: Big-O Time, Big-O Space, Recursion & Memoization.",
    "Do not...",
    "Probability, Bit Manipulation.",
    "Do not ignore information given. Info is there for a reason.",
    "CRACKINIG",
    "CRACKHD",
    "CFACAn3",
    " Do not try to solve problems in your head. Use an example!",
    "PM INTERHIEW",
    " Books by",
    "TECH CAREER",
    "Do not push through code when confused. Stop and think!",
    ".",
    "Gayle",
    "Do not dive into code without interviewer\"sign off\"'",
    " CareerCup.com"
  ],
  "key_value_pairs": {
    "Test in this order": "",
    "optimization or try some of these idleas": "",
    ". BuD": "Look for bottlenecks,",
    "DIY": "Do It Yourself",
    "Simplify & Generalize": "",
    "Base Case & Build": "Solve for",
    "Data Structure Brainstorm": "",
    "Data Structures": "Hash Tables, Linked Lists, Stacks, Queues,",
    "Exercises": "",
    "Algorithms": "Quick Sort, Merge Sort, Binary Search, Breadth-",
    "Concepts": "Big-O Time, Big-O Space, Recursion & Memoization."
  },
  "plain_text": "Listen - - - - Example CRACKING THE Pay very close attention to any info in the  Most examples are too small or are special CODING problem description. You probably need it cases. Debug your example. Is there any way all for an optimal algorithm. it's a special case? Is it big enough? SKILLS BUD Optimization Brute Force Bottleneds Created By Gayle Get a brute-force solution as soon as possible. Don't UnnecessaryWork Laakmann McDowell worry about developing an efficient algorithm DuplicatedWork yet. State a naive algorithm and its runtime, then optimize from there. Don't code yet though! Best Conceivable Runtime (BCR) Test ptimize BCR is the runtime you know you Test in this order: can't beat. For example, if asked Walk through your brute force with BUD to compute the intersection of 1. Conceptual test. Walk through your code optimization or try some of these idleas: two sets, you know you can't beat like you would for a detailed code review. O(|A|+|B|). . Look for any unused info. You usually need all 2. Unusual or non-standard code. the information in a problem. 3. Hot spots, like arithmetic and null nodes. 5 Approaches  Solve it manually on an example, then reverse I 4. Small test cases. It's much faster than a big . BuD: Look for bottlenecks, engineer your thought process. How did you test case and just as effective. solve it? unnecessary work, 5. Special cases and edge cases. duplicated work. , Solve it\"incorrectly\"and then think about why And when you find bugs, fix them carefully! the algorithm fails. Can you fix those issues? DIY: Do It Yourself  Simplify & Generalize: Make a time vs. space tradeoff. Hash tables are I Implement < especially useful! Solve a simpler version. 6 Base Case & Build: Solve for Your goal is to write beautiful code. the base cases then build Walk Through  - - Modularize your code from the beginning from there. and refactor to clean up anything that isn't Data Structure Brainstorm:  Now that you have an optimal solution, walk beautiful. Try various data structures.. through your approach in detail. Make sure you understand each detail before you start coding. What You Need To Know Data Structures: Hash Tables, Linked Lists, Stacks, Queues, Exercises: Trees, Tries, Graphs, Vectors, Heaps. Implement data structures & algorithms from scratch. Prove to yourself the runtime of the major algorithms. Algorithms: Quick Sort, Merge Sort, Binary Search, Breadth- First Search, Depth-First Search. Concepts: Big-O Time, Big-O Space, Recursion & Memoization. Do not... Probability, Bit Manipulation. Do not ignore information given. Info is there for a reason. CRACKINIG CRACKHD CFACAn3  Do not try to solve problems in your head. Use an example! PM INTERHIEW  Books by TECH CAREER Do not push through code when confused. Stop and think! . Gayle Do not dive into code without interviewer\"sign off\"'  CareerCup.com"
}